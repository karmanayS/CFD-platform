// check the last route in the http server for signup and signin
// subscribe to eth stream and get its decimal
// use queues instead of pubsub in the poller 
//create user logic in the engine(with default ballance values) when hitting the signup endpoint 
//order value component returns assuming there are only 2 asssets but it should return dynamically and also all other places which assume only 2 assets should be dynamic
//import common types from a single place and dont define them again and again
//in dashboard the dropdown to select the current asset should also be dynamically generated by hitting the api and not hardcoded
//userId is hardcoded in the frontend req , make the signup sgnin and user auth logic properly
//check whether all the http routes are being used on the frontend
//resend api key in github

//fix supportedAssets route and understand why BLOCK:5000 , COUNT:1 works. Fix this for other routes also where u are using BLOCK:0. Ye beech beech me error deta hai beech me nahi kyunki wohi timing ka scene bnra hai ==> MAJOR ISSUE FIX THIS ==> This issue has been fixed for all routes 

//when placing order,balance isnt being checked ie more than balance order is still being placed
// when creating class redis manager , the editor is lagging in all the laptops
// conversion(ie division multiplication ) should be correct everywhere there is user balance involved
//whether to also store margin by multiplyin it by 100, what is the significance of doing these multiplications
//instead of doing if else for type checking of each element while creating order , use zod
//check liquidate logic once
//user auth 
// dynamically generate the startTime for candles
//liquidate runs in the engine , how to send that event to the frontend so the current open orders dont have the liquidated orders


//OPTIMISATIONS:
//instead of again and again writing the same queue reding logic for userId ,make a function for it if can be made
//loading...  where we are asynchronously fetching state . suspense /lazyloading 

//IMPORTANT
// You shouldnt decrease the user balance when selling which u are doing currently , on the frontend, th user balance should increase because they are selling maybe pu that increased balance in locked. But on the backend there is no selling actually going on under the hood we are just buying bidPrice.
//For the above case just add the margin section to the FE and when a sell order will be placed , the user balance wont be decreased but the margin will be increased and when the order will be closed , only the PNL will be added to the user balance and the margin will be completely subtracted and returned to the platform probably 

//Also in a real application like this if we are trading against a platform then the platform balance should increase when the user balance decreases and vice versa